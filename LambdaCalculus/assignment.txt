Seán Edward Comerford
15485892
Lambda Calculus Assignment

Part 1

kons = lambda a d z . z false a d
kar = lambda p . p (lambda n a d . a)
kdr = lambda p . p (lambda n a d . d)
null = lambda z . z true false false
null? = lambda p . p (lambda n a d . n)
true = lambda a b . a
false = lambda a b . b

kar (kons e1 e2) ↝ e1
Lets focus on the kons e1 e2 and then substitute that into kar
kons = (lambda a d z . z false a d)
(lambda a d z . z false a d) e1 e2

Beta Reduction:
(z false a d)[a:=e1]
(z false e1 d)[d:=e2]
(z false e1 e2)

(lambda z . z false e1 e2)
We can now use this with kar
kar= (lambda p . p(lambda n a d . a))
(lambda p . p(lambda n a d . a))(lambda z . z false e1 e2)

Beta Reduction:
(p(lambda n a d . a))[p:=(lambda z . z false e1 e2)]
(lambda z . z false e1 e2)(lambda n a d . a)

Beta Reduction:
(z false e1 e2)[z:=(lambda n a d . a)]
((lambda n a d . a) false e1 e2)

/*(lambda n a d . a ) takes in three inputs, n a d and returns a */
(lambda n a d . a)[n:=false, a:=e1, d:=e2]
e1

kdr (kons e1 e2) ↝ e2
Lets focus on the kons e1 e2 and then substitute that into kar
kons = (lambda a d z . z false a d)
(lambda a d z . z false a d) e1 e2

Beta Reduction:
(z false a d)[a:=e1]
(z false e1 d)[d:=e2]
(z false e1 e2)

(lambda z . z false e1 e2)
We can now use this with kdr
kdr=(lambda p . p (lambda n a d . d))

(lambda p . p(lambda n a d . d))(lambda z . z false e1 e2)

Beta Reduction:
(p(lambda n a d . d))[p:=(lambda z . z false e1 e2)]
((lambda z . z false e1 e2)(lambda n a d . d))

Beta Reduction:
(z false e1 e2)[z:(lambda n a d . d)]
((lambda n a d . d) false e1 e2)
[n:=false, a:=e1, d:=e2]
e2

null? (kons e1 e2) ↝  false
Deal with (kons e1 e2 first)
kons = (lambda a d z . z false a d)
(lambda a d z . z false a d) e1 e2

Beta Reduction:
(z false a d)[a:=e1]
(z false e1 d)
(z false e1 d)[d:=e2]
(z false e1 e2)

(lambda z . z false e1 e2)

Now we can substitute this back into null? and see if it returns false
null? = (lambda p . p (lambda n a d . n))
(lambda p . p (lambda n a d . n))(lambda z . z false e1 e2)

Beta Reduction:
(p (lambda n a d . n))[p:=(lambda z .z false e1 e2)]
((lambda z .z false e1 e2)(lambda n a d . n))

Beta Reducution:
(z false e1 e2) [z:=(lambda n a d . n)]
((lambda n a d . n) false e1 e2)

Beta Reduction:
(n) [n:=false , a:=e1 , d:=e2]
(false)
false

null? null ↝ true
(lambda p. p(lambda n a d . n))(lambda z. z true false false)

Beta Reduction:
p(lambda n a d . n)[p:= (lambda z . z true false false)]
(lambda z . z true false false)(lambda n a d . n)

Beta Reduction:
(z true false false)[z:=(lambda n a d . n)]
((lambda n a d . n) true false false)

Beta Reduction:
(n) [n:= true]
(true)
true
// this is because lambda n a d takes in 3 variables(true, false, false respectively) and returns the first, which is true

Part 2:

(lambda c . (lambda a . (lambda d . (lambda h . (h (d (a (a (lambda z y . y))) (d (a (a (lambda f x . x))) (a (a (a (lambda z x . x)))))) (h (a (a (lambda z y . y))) (a (a (a (lambda z x . x))))))) (lambda n m . n (d m) (lambda z y . y))) (lambda n m . n a m)) (lambda n z . c (n z) z)) (lambda z g x . z (g x))

//using false = lambdaab.b , true = lambdaab.a renaming to prevent & removing arbitrary bracket
(lambda c . (lambda a . (lambda d . lambda h . (h (d (a (a (false))) (d (a (a (false))) (a (a (a (false)))))) (h (a (a (false))) (a (a (a (false))))))) (true (d1 m1) (false))) (true a1 m)) (lambda n1 z1 . c1 (n1 z1) z1) (lambda z g1 x1 . z (g x))

//removing lambda c by substitution
(lambda a . (lambda d . lambda h . (h (d (a (a (false))) (d (a (a (false))) (a (a (a (false)))))) (h (a (a (false))) (a (a (a (false))))))) (true (d1 m1) (false))) (true a1 m)(lambda z g1 x1 . z (g x))

//removing lambda a by substitution
(lambda d . lambda h . (h (d (true a1 m (true a1 m (false))) (d (true a1 m (true a1 m (false))) (true a1 m (true a1 m (true a1 m (false)))))) (h (true a1 m (true a1 m (false))) (true a1 m (true a1 m (true a1 m (false))))))) (true (d1 m1) (false))(lambda z g1 x1 . z (g x))

//removing lambda d by substitution
(lambda h . (h (true (d1 m1) false (true a1 m (true a1 m (false))) (true (d1 m1) false (true a1 m (true a1 m (false))) (true a1 m (true a1 m (true a1 m (false)))))) (h (true a1 m (true a1 m (false))) (true a1 m (true a1 m (true a1 m (false))))))) (lambda z g1 x1 . z (g x))

//removing lambda h by substitution
(lambda z g1 x1 . z )(g x) (true (d1 m1) false (true a1 m (true a1 m false)) (true (d1 m1) false (true a1 m (true a1 m false)) (true a1 m (true a1 m (true a1 m false))))) ((lambda z g1 x1 . z )(g x) (true a1 m (true a1 m false)) (true a1 m (true a1 m (true a1 m false)))) 

//rewriting:
(lambdaz.lambdag1.lambdax1.z)(g x) (true (d1 m1) false (true a1 m (true a1 m false)) (true (d1 m1) false (true a1 m (true a1 m false)) (true a1 m (true a1 m (true a1 m false))))) ((lambdaz.lambdag1.lambdax1.z)(g x) (true a1 m (true a1 m false)) (true a1 m (true a1 m (true a1 m false)))) 

//removing lambdaz in two occurances by substitution
(lambdag1.lambdax1.g x)(true (d1 m1) false (true a1 m (true a1 m false)) (true (d1 m1) false (true a1 m (true a1 m false)) (true a1 m (true a1 m (true a1 m false))))) ((lambdag1.lambdax1.g x) (true a1 m (true a1 m false)) (true a1 m (true a1 m (true a1 m false)))) 

//removing lambdag1 in two occurances by substitution
(lambdax1.g x) ((lambdax1.g x) (true a1 m (true a1 m (true a1 m false)))) 

//removing lambdax1 by substitution 
(g x) 

Normal Form = g x
